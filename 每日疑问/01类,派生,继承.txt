class oldboystudent:
    school='oldboy'
    def __init__(self,x,y,z):#init方法会在调用时自动触发
        self.name=x         #stu1.name='好歌'
        self.age=y          #stu1.age=18
        self.sex=z          #stu1.sex='male

    def chooce_course(self):
        print('我喜欢美国日本台湾啦啦啦啦')

#调用类时发生了两件事
#1,创造了一个空对象stul
#2,自动触发类中__init__功能的执行,将stul以及调用括号内的参数一同传入
stu1=oldboystudent('耗哥','18','male')#OldboyStudent.__init__(stu1,'耗哥',18,'male')
stu2=oldboystudent('诸葛','18','那么')#把stu2自动传给self
stu3=oldboystudent('姜子牙','1111','圣人')
print(stu1.__dict__)
print(stu2.__dict__)
print(stu3.__dict__)

# 疑问,以下的结果产生在对象中存放,还是类的自带init中存放???


# {'name': '耗哥', 'age': '18', 'sex': 'male'}
# {'name': '诸葛', 'age': '18', 'sex': '那么'}
# {'name': '姜子牙', 'age': '1111', 'sex': '圣人'}

print(oldboystudent.__dict__)


解答------------------------------------------------
对象寻找类中的init方法,然后取其中的的方法,其中产生的值字典的形式存放在对象的名称空间中
类的内存空间不产生新的值